services:
  postgres:
    image: postgres:15-alpine
    container_name: userservice-postgres
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - userservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userservice"]
      interval: 30s
      timeout: 10s
      retries: 3

  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: userservice-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin_password
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/user_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: admin_password_123
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8081
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - userservice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: start-dev

  user-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user-service-app
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: user_db
      DB_USERNAME: postgres
      DB_PASSWORD: admin_password_123
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: user-service
      KEYCLOAK_CLIENT_ID: user-service-rest-api
      KEYCLOAK_CLIENT_SECRET: P8BgktXEovxnnuO1RaKvImNulaUQosm2
      KEYCLOAK_ISSUER_URI: http://localhost:8081/realms/user-realm
      KEYCLOAK_JWK_SET_URI: http://localhost:8081/realms/user-realm/protocol/openid-connect/certs
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - userservice-network
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/user-service/actuator/health"]
#      interval: 30s
#      timeout: 10s
#      retries: 3

volumes:
  postgres_data:

networks:
  userservice-network:
    driver: bridge